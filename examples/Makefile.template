# EpicChain Smart Contract Makefile Template
# Copy this file to your contract directory and customize the CONTRACT_NAME

# Contract configuration - CUSTOMIZE THESE
CONTRACT_NAME = your-contract-name
CONTRACT_DESCRIPTION = "Your contract description"

# Build configuration
WASM_TARGET = wasm32-unknown-unknown
BUILD_DIR = target/$(WASM_TARGET)/release
WASM_FILE = $(BUILD_DIR)/$(CONTRACT_NAME).wasm
NEF_FILE = $(CONTRACT_NAME).nef
MANIFEST_FILE = $(CONTRACT_NAME).manifest.json

# Compiler paths
EPICCHAIN_WASM_COMPILER = ../../epicchain-wasm/epicchain-wasm
CARGO = cargo

# Colors for output
GREEN = \033[0;32m
YELLOW = \033[1;33m
RED = \033[0;31m
NC = \033[0m # No Color

# Default target
.PHONY: all
all: build

# Build the WASM contract
.PHONY: build
build:
	@echo "$(GREEN)üî® Building $(CONTRACT_NAME) contract...$(NC)"
	$(CARGO) build --target $(WASM_TARGET) --release
	@echo "$(GREEN)‚úÖ Build complete: $(WASM_FILE)$(NC)"

# Run tests
.PHONY: test
test:
	@echo "$(GREEN)üß™ Running tests for $(CONTRACT_NAME)...$(NC)"
	$(CARGO) test
	@echo "$(GREEN)‚úÖ Tests completed$(NC)"

# Run tests with output
.PHONY: test-verbose
test-verbose:
	@echo "$(GREEN)üß™ Running tests for $(CONTRACT_NAME) with output...$(NC)"
	$(CARGO) test -- --nocapture
	@echo "$(GREEN)‚úÖ Tests completed$(NC)"

# Compile WASM to NEF format
.PHONY: compile
compile: build
	@echo "$(YELLOW)üîÑ Compiling WASM to NEF format...$(NC)"
	@if [ ! -f "$(EPICCHAIN_WASM_COMPILER)" ]; then \
		echo "$(YELLOW)‚ö†Ô∏è  epicchain-wasm compiler not found. Building...$(NC)"; \
		cd ../../epicchain-wasm && go build -o epicchain-wasm ./cmd; \
	fi
	$(EPICCHAIN_WASM_COMPILER) -i $(WASM_FILE) -o $(NEF_FILE) -m $(MANIFEST_FILE)
	@echo "$(GREEN)‚úÖ Compilation complete: $(NEF_FILE)$(NC)"

# Deploy to testnet (requires epicchain-cli setup)
.PHONY: deploy
deploy: compile
	@echo "$(YELLOW)üöÄ Deploying $(CONTRACT_NAME) to testnet...$(NC)"
	@echo "$(YELLOW)‚ö†Ô∏è  Make sure epicchain-cli is running and configured for testnet$(NC)"
	@echo "üìÑ NEF file: $(NEF_FILE)"
	@echo "üìÑ Manifest file: $(MANIFEST_FILE)"
	@echo "üí° Use epicchain-cli deploy command with these files"

# Clean build artifacts
.PHONY: clean
clean:
	@echo "$(YELLOW)üßπ Cleaning build artifacts...$(NC)"
	$(CARGO) clean
	rm -f $(NEF_FILE) $(MANIFEST_FILE)
	@echo "$(GREEN)‚úÖ Clean complete$(NC)"

# Check code formatting
.PHONY: fmt
fmt:
	@echo "$(GREEN)üé® Formatting code...$(NC)"
	$(CARGO) fmt
	@echo "$(GREEN)‚úÖ Formatting complete$(NC)"

# Check code formatting (dry run)
.PHONY: fmt-check
fmt-check:
	@echo "$(GREEN)üé® Checking code formatting...$(NC)"
	$(CARGO) fmt --check
	@echo "$(GREEN)‚úÖ Format check complete$(NC)"

# Run clippy linter
.PHONY: clippy
clippy:
	@echo "$(GREEN)üìé Running clippy linter...$(NC)"
	$(CARGO) clippy --target $(WASM_TARGET) -- -D warnings
	@echo "$(GREEN)‚úÖ Clippy check complete$(NC)"

# Run all checks (format, clippy, test, build)
.PHONY: check
check: fmt-check clippy test build
	@echo "$(GREEN)‚úÖ All checks passed!$(NC)"

# Watch for changes and rebuild
.PHONY: watch
watch:
	@echo "$(GREEN)üëÄ Watching for changes...$(NC)"
	$(CARGO) watch -x "build --target $(WASM_TARGET) --release"

# Generate documentation
.PHONY: doc
doc:
	@echo "$(GREEN)üìö Generating documentation...$(NC)"
	$(CARGO) doc --no-deps --open
	@echo "$(GREEN)‚úÖ Documentation generated$(NC)"

# Run security audit
.PHONY: audit
audit:
	@echo "$(GREEN)üîí Running security audit...$(NC)"
	$(CARGO) audit
	@echo "$(GREEN)‚úÖ Security audit complete$(NC)"

# Show contract size
.PHONY: size
size: build
	@echo "$(GREEN)üìè Contract size information:$(NC)"
	@ls -lh $(WASM_FILE)
	@echo "WASM size: $$(wc -c < $(WASM_FILE)) bytes"

# Optimize build (experimental)
.PHONY: optimize
optimize:
	@echo "$(YELLOW)‚ö° Building optimized contract...$(NC)"
	$(CARGO) build --target $(WASM_TARGET) --release
	@if command -v wasm-opt >/dev/null 2>&1; then \
		echo "$(GREEN)üîß Running wasm-opt...$(NC)"; \
		wasm-opt -Oz $(WASM_FILE) -o $(WASM_FILE).opt; \
		mv $(WASM_FILE).opt $(WASM_FILE); \
		echo "$(GREEN)‚úÖ Optimization complete$(NC)"; \
	else \
		echo "$(YELLOW)‚ö†Ô∏è  wasm-opt not found, skipping optimization$(NC)"; \
	fi

# Show help
.PHONY: help
help:
	@echo "$(GREEN)üìñ Available commands for $(CONTRACT_NAME):$(NC)"
	@echo "  $(YELLOW)build$(NC)        - Build the WASM contract"
	@echo "  $(YELLOW)test$(NC)         - Run unit tests"
	@echo "  $(YELLOW)test-verbose$(NC) - Run tests with output"
	@echo "  $(YELLOW)compile$(NC)      - Compile WASM to NEF format"
	@echo "  $(YELLOW)deploy$(NC)       - Deploy to testnet"
	@echo "  $(YELLOW)clean$(NC)        - Clean build artifacts"
	@echo "  $(YELLOW)fmt$(NC)          - Format code"
	@echo "  $(YELLOW)fmt-check$(NC)    - Check code formatting"
	@echo "  $(YELLOW)clippy$(NC)       - Run linter"
	@echo "  $(YELLOW)check$(NC)        - Run all checks"
	@echo "  $(YELLOW)watch$(NC)        - Watch for changes and rebuild"
	@echo "  $(YELLOW)doc$(NC)          - Generate documentation"
	@echo "  $(YELLOW)audit$(NC)        - Run security audit"
	@echo "  $(YELLOW)size$(NC)         - Show contract size"
	@echo "  $(YELLOW)optimize$(NC)     - Build with optimizations"
	@echo "  $(YELLOW)help$(NC)         - Show this help message"
	@echo ""
	@echo "$(GREEN)üìù Contract Information:$(NC)"
	@echo "  Name: $(CONTRACT_NAME)"
	@echo "  Description: $(CONTRACT_DESCRIPTION)"
	@echo "  WASM Target: $(WASM_TARGET)"
	@echo "  Output: $(WASM_FILE)"
